// Code generated by protoc-gen-hprose , DO NOT EDIT.
// source: say.proto

package say


import (
	"github.com/astaxie/beego"
	"github.com/hprose/hprose-golang/rpc"
	"github.com/zhwei820/BasePbClient"
	"strings"
	"errors"
	"github.com/rs/zerolog/log"
)


var SayClientRpc *pbclients.ClientRpcs

func CreateNewSayRpcClients(remoteSvcUrlsKey string) * pbclients.ClientRpcs {
	rpcUrls := beego.AppConfig.DefaultString(remoteSvcUrlsKey, "")
	rpcUrlList := strings.Split(rpcUrls, ";")
	clientRpc:= pbclients.CreateNewInstance()
	for _, rpcUrl := range rpcUrlList{
		rpclient := rpc.NewHTTPClient(rpcUrl)
		clientRpc.Clients = append(clientRpc.Clients, rpclient)

		var sayService *SayService // replace this
		rpclient.UseService(&sayService)
		clientRpc.Services = append(clientRpc.Services, sayService)
	}
	return clientRpc
}

func init()  {
	SayClientRpc = CreateNewSayRpcClients("sayrpc_urls")
}


func SayRpc(clientRpcs *pbclients.ClientRpcs, name string, input []byte) (res []byte, err error) {
	flag:=1
	for ii := 0; ii <= 1; ii++ {
		svc, idx, pos, _ := clientRpcs.GetService() // 远程方法实例
		if svc == nil {
			println("svc nil")
			return res, errors.New("svc nil")
		}
		res, err = funcMap[name](svc, input)

		if err != nil {
			if strings.Contains(err.Error(), "connect") {
				clientRpcs.KnockdownService(idx, pos)
				flag +=1
				if flag <=2{
					continue
				}
			}
			log.Printf("%v", err)
		}
		return res, err
	}
	return res, err
}

var funcMap map[string]func(svc interface{}, input []byte) ([]byte, error)




func CallSayHello(svc interface{}, input []byte) ([]byte, error) {
	res, err := svc.(*SayService).SayHello(input)
	return res, err
}



func init() {
	funcMap = map[string]func(svc interface{}, input []byte) ([]byte, error){
		
    "SayHello": CallSayHello,
	}
}
